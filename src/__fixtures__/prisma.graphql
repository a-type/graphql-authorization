# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type OtherThing implements Node {
  id: ID!
  baz: String!
  user(where: UserWhereInput): User!
}

type Thing implements Node {
  id: ID!
  foo: Int!
  user(where: UserWhereInput): User!
  otherThing(where: OtherThingWhereInput): OtherThing
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
  role: Role!
}


#
# Other Types
#

type AggregateOtherThing {
  count: Int!
}

type AggregateThing {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createThing(data: ThingCreateInput!): Thing!
  createOtherThing(data: OtherThingCreateInput!): OtherThing!
  createUser(data: UserCreateInput!): User!
  updateThing(data: ThingUpdateInput!, where: ThingWhereUniqueInput!): Thing
  updateOtherThing(data: OtherThingUpdateInput!, where: OtherThingWhereUniqueInput!): OtherThing
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteThing(where: ThingWhereUniqueInput!): Thing
  deleteOtherThing(where: OtherThingWhereUniqueInput!): OtherThing
  deleteUser(where: UserWhereUniqueInput!): User
  upsertThing(where: ThingWhereUniqueInput!, create: ThingCreateInput!, update: ThingUpdateInput!): Thing!
  upsertOtherThing(where: OtherThingWhereUniqueInput!, create: OtherThingCreateInput!, update: OtherThingUpdateInput!): OtherThing!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyThings(data: ThingUpdateInput!, where: ThingWhereInput!): BatchPayload!
  updateManyOtherThings(data: OtherThingUpdateInput!, where: OtherThingWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyThings(where: ThingWhereInput!): BatchPayload!
  deleteManyOtherThings(where: OtherThingWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type OtherThingConnection {
  pageInfo: PageInfo!
  edges: [OtherThingEdge]!
  aggregate: AggregateOtherThing!
}

input OtherThingCreateInput {
  baz: String!
  user: UserCreateOneInput!
}

input OtherThingCreateOneInput {
  create: OtherThingCreateInput
  connect: OtherThingWhereUniqueInput
}

type OtherThingEdge {
  node: OtherThing!
  cursor: String!
}

enum OtherThingOrderByInput {
  id_ASC
  id_DESC
  baz_ASC
  baz_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OtherThingPreviousValues {
  id: ID!
  baz: String!
}

type OtherThingSubscriptionPayload {
  mutation: MutationType!
  node: OtherThing
  updatedFields: [String!]
  previousValues: OtherThingPreviousValues
}

input OtherThingSubscriptionWhereInput {
  AND: [OtherThingSubscriptionWhereInput!]
  OR: [OtherThingSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OtherThingWhereInput
}

input OtherThingUpdateInput {
  baz: String
  user: UserUpdateOneInput
}

input OtherThingUpdateOneInput {
  create: OtherThingCreateInput
  connect: OtherThingWhereUniqueInput
  disconnect: OtherThingWhereUniqueInput
  delete: OtherThingWhereUniqueInput
}

input OtherThingWhereInput {
  AND: [OtherThingWhereInput!]
  OR: [OtherThingWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  baz: String
  baz_not: String
  baz_in: [String!]
  baz_not_in: [String!]
  baz_lt: String
  baz_lte: String
  baz_gt: String
  baz_gte: String
  baz_contains: String
  baz_not_contains: String
  baz_starts_with: String
  baz_not_starts_with: String
  baz_ends_with: String
  baz_not_ends_with: String
  user: UserWhereInput
}

input OtherThingWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  things(where: ThingWhereInput, orderBy: ThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Thing]!
  otherThings(where: OtherThingWhereInput, orderBy: OtherThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OtherThing]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  thing(where: ThingWhereUniqueInput!): Thing
  otherThing(where: OtherThingWhereUniqueInput!): OtherThing
  user(where: UserWhereUniqueInput!): User
  thingsConnection(where: ThingWhereInput, orderBy: ThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ThingConnection!
  otherThingsConnection(where: OtherThingWhereInput, orderBy: OtherThingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OtherThingConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ROOT
  SUPER_USER
  USER
}

type Subscription {
  thing(where: ThingSubscriptionWhereInput): ThingSubscriptionPayload
  otherThing(where: OtherThingSubscriptionWhereInput): OtherThingSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type ThingConnection {
  pageInfo: PageInfo!
  edges: [ThingEdge]!
  aggregate: AggregateThing!
}

input ThingCreateInput {
  foo: Int!
  user: UserCreateOneInput!
  otherThing: OtherThingCreateOneInput
}

type ThingEdge {
  node: Thing!
  cursor: String!
}

enum ThingOrderByInput {
  id_ASC
  id_DESC
  foo_ASC
  foo_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ThingPreviousValues {
  id: ID!
  foo: Int!
}

type ThingSubscriptionPayload {
  mutation: MutationType!
  node: Thing
  updatedFields: [String!]
  previousValues: ThingPreviousValues
}

input ThingSubscriptionWhereInput {
  AND: [ThingSubscriptionWhereInput!]
  OR: [ThingSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ThingWhereInput
}

input ThingUpdateInput {
  foo: Int
  user: UserUpdateOneInput
  otherThing: OtherThingUpdateOneInput
}

input ThingWhereInput {
  AND: [ThingWhereInput!]
  OR: [ThingWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  foo: Int
  foo_not: Int
  foo_in: [Int!]
  foo_not_in: [Int!]
  foo_lt: Int
  foo_lte: Int
  foo_gt: Int
  foo_gte: Int
  user: UserWhereInput
  otherThing: OtherThingWhereInput
}

input ThingWhereUniqueInput {
  id: ID
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  name: String!
  role: Role!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
  role: Role!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  name: String
  role: Role
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
